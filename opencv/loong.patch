--- a/PKGBUILD
+++ b/PKGBUILD
@@ -121,7 +121,6 @@ build() {
     -DINSTALL_PYTHON_EXAMPLES=ON
     -DCMAKE_INSTALL_PREFIX=/usr
     -DCPU_BASELINE_DISABLE=SSE3
-    -DCPU_BASELINE_REQUIRE=SSE2
     -DOPENCV_EXTRA_MODULES_PATH="$srcdir"/opencv_contrib/modules
     -DOPENCV_SKIP_PYTHON_LOADER=ON
     # cmake's FindLAPACK doesn't add cblas to LAPACK_LIBRARIES, so we need to specify them manually
@@ -140,7 +139,8 @@ build() {
   cmake -B build -S $pkgname "${cmake_options[@]}" \
     -DBUILD_WITH_DEBUG_INFO=ON
   cmake --build build
-
+  # Use a "multi-line comment" to keep patch from rotting
+  : <<'COMMENT_SEPARATOR'
   # In general, we want to list all real archs (sm_XX) and the latest virtual arch (compute_XX) for future PTX compatibility.
   # Valid values can be discovered from nvcc --help
   local cuda_archs="75;80;86;87;88;89;90;100;103;110;120;121;121-virtual"
@@ -155,6 +155,7 @@ build() {
     -DENABLE_CUDA_FIRST_CLASS_LANGUAGE=ON \
     -DCMAKE_CUDA_ARCHITECTURES="$cuda_archs"
   cmake --build build-cuda --verbose
+COMMENT_SEPARATOR
 }
 
 package_opencv() {
@@ -235,3 +236,11 @@ package_python-opencv-cuda() {
 
   DESTDIR="$pkgdir" cmake --install build-cuda/modules/python3
 }
+
+for i in "${!pkgname[@]}"; do
+  if [[ ${pkgname[$i]} == *"-cuda" ]]; then
+    unset 'pkgname[$i]'
+  fi
+done
+makedepends=(${makedepends[@]/cuda})
+makedepends=(${makedepends[@]/cudnn})
